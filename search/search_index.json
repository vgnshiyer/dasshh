{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dasshh","text":"An AI Agent on your terminal, to preserve your brain juice.  <p>Dasshh is an open source tui-application built with textual that allows you to interact with your computer using natural language.</p> <p></p> <p>Note</p> <p>This project is still in early development. Suggestions and contributions are welcome!</p> Features Natural Language Computer Control <ul> <li>Execute system commands with plain English</li> <li>Manage files and directories conversationally</li> <li>Get real-time system information</li> <li>Automate repetitive tasks</li> </ul> Interactive &amp; Minimal Chat UI <ul> <li>Clean, distraction-free interface</li> <li>Syntax highlighting for code snippets</li> <li>Multiple themes to choose from</li> <li>Persistent chat memory across sessions</li> </ul> Extensible Tool System <ul> <li>Add custom tools easily</li> <li>Integrate with your existing workflows</li> <li>MCP Support (Coming Soon)</li> <li>Share tools with the community</li> </ul> Terminal-Native Experience <ul> <li>Works where you already work - your terminal</li> <li>Lightweight and fast</li> <li>Cross-platform compatibility</li> <li>No GUI dependencies</li> </ul> Get Involved <p>Dasshh is evolving rapidly and your feedback is essential to its development. The future direction of this project will be heavily influenced by community input.</p> How to Contribute <ul> <li>Try it out and share your experience</li> <li>Spread the word about Dasshh</li> <li>Suggest features or report bugs</li> <li>Share ideas for new tools and integrations</li> <li>Contribute code through pull requests</li> </ul> <p>Join us in building an AI assistant that truly understands how developers work in the terminal!</p>"},{"location":"api/data/","title":"Data","text":"<p>This page lays out all the classes and methods available in the Dasshh data module.</p> <p>Tip</p> <p>The data module handles persistence using SQLite and SQLAlchemy for managing chat sessions, conversation history, and tool execution events.</p>"},{"location":"api/data/#database-models","title":"Database Models","text":"<p>SQLAlchemy models that define the database schema.</p>"},{"location":"api/data/#model-storagesession","title":"<code>model</code> StorageSession","text":"<p>Database model for storing chat sessions</p> <pre><code>class StorageSession(Base)\n</code></pre> <p>Table: <code>sessions</code></p> <p>Attributes:</p> Attribute Type Description id str Primary key, UUID string automatically generated detail str Brief description or preview of the session content created_at datetime Timestamp when the session was created (UTC) updated_at datetime Timestamp when the session was last updated (UTC) events relationship Related StorageEvent objects for this session <p>Database Schema:</p> <pre><code>CREATE TABLE sessions (\n    id VARCHAR PRIMARY KEY,\n    detail VARCHAR,\n    created_at DATETIME,\n    updated_at DATETIME\n);\n</code></pre>"},{"location":"api/data/#model-storageevent","title":"<code>model</code> StorageEvent","text":"<p>Database model for storing conversation events and tool executions</p> <pre><code>class StorageEvent(Base)\n</code></pre> <p>Table: <code>events</code></p> <p>Attributes:</p> Attribute Type Description id str Primary key, UUID string automatically generated invocation_id str Identifier linking events to a specific query invocation session_id str Foreign key referencing sessions.id created_at datetime Timestamp when the event was created (UTC) content JSON Event data stored as JSON (messages, tool calls, etc.) session relationship Related StorageSession object <p>Database Schema:</p> <pre><code>CREATE TABLE events (\n    id VARCHAR PRIMARY KEY,\n    invocation_id VARCHAR,\n    session_id VARCHAR REFERENCES sessions(id),\n    created_at DATETIME,\n    content JSON\n);\n</code></pre>"},{"location":"api/data/#database-client","title":"Database Client","text":""},{"location":"api/data/#class-base","title":"<code>class</code> Base","text":"<p>SQLAlchemy declarative base class for all database models</p> <pre><code>class Base(DeclarativeBase)\n</code></pre> <p>Usage: - Parent class for all database models - Provides SQLAlchemy ORM functionality</p>"},{"location":"api/data/#class-dbclient","title":"<code>class</code> DBClient","text":"<p>Database client for managing SQLite connections</p> <pre><code>class DBClient\n</code></pre> <p>Attributes:</p> Attribute Type Description db_path Path Path to SQLite database file (~/.dasshh/db/dasshh.db) engine Engine SQLAlchemy database engine DatabaseSessionFactory sessionmaker Session factory for creating database sessions"},{"location":"api/data/#method-init","title":"<code>method</code> init","text":"<pre><code>__init__()\n</code></pre> <p>Initialize the database client and create necessary directories and tables</p> <p>Behavior: - Creates ~/.dasshh/db/ directory if it doesn't exist - Creates SQLite database file - Sets up SQLAlchemy engine and session factory - Creates all database tables defined in models</p>"},{"location":"api/data/#method-get_db","title":"<code>method</code> get_db","text":"<pre><code>get_db() -&gt; Generator[Session, None, None]\n</code></pre> <p>Get a database session for executing queries</p> <p>Returns:</p> Type Default Description Generator[Session, None, None] SQLAlchemy database session <p>Usage: <pre><code>with db_client.get_db() as db:\n    # Use db session here\n    result = db.query(StorageSession).all()\n</code></pre></p>"},{"location":"api/data/#session-service","title":"Session Service","text":""},{"location":"api/data/#class-sessionservice","title":"<code>class</code> SessionService","text":"<p>Service class for managing chat sessions and events</p> <pre><code>class SessionService\n</code></pre> <p>Attributes:</p> Attribute Type Description db_client DBClient Database client instance for database operations"},{"location":"api/data/#method-init_1","title":"<code>method</code> init","text":"<pre><code>__init__(db_client: DBClient)\n</code></pre> <p>Initialize the session service with a database client</p> <p>Parameters:</p> Param Default Description db_client DBClient instance for database operations"},{"location":"api/data/#method-new_session","title":"<code>method</code> new_session","text":"<pre><code>new_session(detail: str = \"New Session\") -&gt; StorageSession\n</code></pre> <p>Create a new chat session</p> <p>Parameters:</p> Param Default Description detail \"New Session\" Brief description or preview text for the session <p>Returns:</p> Type Default Description StorageSession The newly created session object"},{"location":"api/data/#method-get_session","title":"<code>method</code> get_session","text":"<pre><code>get_session(*, session_id: str) -&gt; StorageSession | None\n</code></pre> <p>Retrieve a specific session by its ID</p> <p>Parameters:</p> Param Default Description session_id Unique identifier of the session to retrieve <p>Returns:</p> Type Default Description StorageSession | None The session object, or None if not found"},{"location":"api/data/#method-get_events","title":"<code>method</code> get_events","text":"<pre><code>get_events(*, session_id: str) -&gt; list[StorageEvent]\n</code></pre> <p>Get all events for a specific session</p> <p>Parameters:</p> Param Default Description session_id Unique identifier of the session <p>Returns:</p> Type Default Description list[StorageEvent] List of all events in the session"},{"location":"api/data/#method-get_recent_session","title":"<code>method</code> get_recent_session","text":"<pre><code>get_recent_session() -&gt; StorageSession | None\n</code></pre> <p>Get the most recently updated session</p> <p>Returns:</p> Type Default Description StorageSession | None The most recent session, or None if no sessions exist"},{"location":"api/data/#method-update_session","title":"<code>method</code> update_session","text":"<pre><code>update_session(*, session_id: str, detail: str) -&gt; None\n</code></pre> <p>Update a session's detail and timestamp</p> <p>Parameters:</p> Param Default Description session_id Unique identifier of the session to update detail New detail text for the session"},{"location":"api/data/#method-list_sessions","title":"<code>method</code> list_sessions","text":"<pre><code>list_sessions(include_events: bool = False) -&gt; list[StorageSession]\n</code></pre> <p>List all sessions in the database</p> <p>Parameters:</p> Param Default Description include_events False Whether to load related events for each session <p>Returns:</p> Type Default Description list[StorageSession] List of all sessions <p>Notes: - When <code>include_events=False</code>, related events are not loaded for better performance - When <code>include_events=True</code>, all related events are loaded via SQLAlchemy relationships</p>"},{"location":"api/data/#method-delete_session","title":"<code>method</code> delete_session","text":"<pre><code>delete_session(*, session_id: str) -&gt; None\n</code></pre> <p>Delete a session and all its related events</p> <p>Parameters:</p> Param Default Description session_id Unique identifier of the session to delete <p>Notes: - Cascading delete removes all related events automatically - No error if session doesn't exist</p>"},{"location":"api/data/#method-add_event","title":"<code>method</code> add_event","text":"<pre><code>add_event(*, invocation_id: str, session_id: str, content: dict) -&gt; None\n</code></pre> <p>Add a new event to a session</p> <p>Parameters:</p> Param Default Description invocation_id Identifier linking this event to a query invocation session_id Unique identifier of the session content Event data as a dictionary (will be stored as JSON) <p>Event Content Examples:</p> <pre><code># User message\ncontent = {\n    \"role\": \"user\",\n    \"content\": \"Hello, how are you?\"\n}\n\n# Assistant response\ncontent = {\n    \"role\": \"assistant\", \n    \"content\": \"I'm doing well, thank you!\"\n}\n\n# Tool call\ncontent = {\n    \"role\": \"assistant\",\n    \"tool_calls\": [\n        {\n            \"id\": \"call_123\",\n            \"function\": {\n                \"name\": \"get_weather\",\n                \"arguments\": '{\"city\": \"San Francisco\"}'\n            }\n        }\n    ]\n}\n\n# Tool result\ncontent = {\n    \"role\": \"tool\",\n    \"tool_call_id\": \"call_123\", \n    \"name\": \"get_weather\",\n    \"content\": '{\"temperature\": 72, \"condition\": \"sunny\"}'\n}\n</code></pre>"},{"location":"api/data/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/data/#basic-session-management","title":"Basic Session Management","text":"<pre><code>from dasshh.data.client import DBClient\nfrom dasshh.data.session import SessionService\n\n# Initialize\ndb_client = DBClient()\nsession_service = SessionService(db_client)\n\n# Create new session\nsession = session_service.new_session(\"My first chat\")\n\n# Add user message\nsession_service.add_event(\n    invocation_id=\"inv_123\",\n    session_id=session.id,\n    content={\"role\": \"user\", \"content\": \"Hello\"}\n)\n\n# Add assistant response\nsession_service.add_event(\n    invocation_id=\"inv_123\", \n    session_id=session.id,\n    content={\"role\": \"assistant\", \"content\": \"Hi there!\"}\n)\n</code></pre>"},{"location":"api/data/#loading-conversation-history","title":"Loading Conversation History","text":"<pre><code># Get recent session\nrecent = session_service.get_recent_session()\n\n# Get all events for reconstruction\nif recent:\n    events = session_service.get_events(session_id=recent.id)\n    for event in events:\n        print(f\"{event.content['role']}: {event.content['content']}\")\n</code></pre>"},{"location":"api/events/","title":"Events","text":"<p>Dasshh uses an event-queue messaging architecture to update the UI with events.</p> <p>This page lays out all the event classes available.</p> <p>Note</p> <p>Events in Dasshh are based on Textual's Message system</p>"},{"location":"api/events/#ui-events","title":"UI Events","text":"<p>Events related to user interface interactions and navigation.</p>"},{"location":"api/events/#event-changeview","title":"<code>event</code> ChangeView","text":"<p>Change the view on the main screen</p> <pre><code>class ChangeView(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description view str The name of the view to switch to <p>Constructor:</p> <pre><code>ChangeView(view: str)\n</code></pre> <p>Parameters:</p> Param Default Description view The target view name (e.g., \"chat\", \"settings\", \"about\")"},{"location":"api/events/#chat-events","title":"Chat Events","text":"<p>Events related to chat interactions and session management.</p>"},{"location":"api/events/#event-newmessage","title":"<code>event</code> NewMessage","text":"<p>Send a message to the chat</p> <pre><code>class NewMessage(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description message str The message content to send <p>Constructor:</p> <pre><code>NewMessage(message: str)\n</code></pre> <p>Parameters:</p> Param Default Description message The user message to send to the assistant"},{"location":"api/events/#event-newsession","title":"<code>event</code> NewSession","text":"<p>Create a new session</p> <pre><code>class NewSession(Message)\n</code></pre> <p>Constructor:</p> <pre><code>NewSession()\n</code></pre> <p>Notes: - This event triggers the creation of a new chat session - No parameters required</p>"},{"location":"api/events/#event-loadsession","title":"<code>event</code> LoadSession","text":"<p>Load a previous session</p> <pre><code>class LoadSession(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description session_id str The ID of the session to load <p>Constructor:</p> <pre><code>LoadSession(session_id: str)\n</code></pre> <p>Parameters:</p> Param Default Description session_id The unique identifier of the session to load"},{"location":"api/events/#event-deletesession","title":"<code>event</code> DeleteSession","text":"<p>Delete an existing session</p> <pre><code>class DeleteSession(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description session_id str The ID of the session to delete <p>Constructor:</p> <pre><code>DeleteSession(session_id: str)\n</code></pre> <p>Parameters:</p> Param Default Description session_id The unique identifier of the session to delete"},{"location":"api/events/#assistant-runtime-events","title":"Assistant Runtime Events","text":"<p>Events related to AI assistant processing and responses.</p>"},{"location":"api/events/#event-assistantresponsestart","title":"<code>event</code> AssistantResponseStart","text":"<p>Event triggered before assistant starts processing a query</p> <pre><code>class AssistantResponseStart(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for this query invocation <p>Constructor:</p> <pre><code>AssistantResponseStart(invocation_id: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track this specific query through its lifecycle"},{"location":"api/events/#event-assistantresponseupdate","title":"<code>event</code> AssistantResponseUpdate","text":"<p>Event triggered when assistant returns a partial response (streaming)</p> <pre><code>class AssistantResponseUpdate(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for this query invocation content str Partial content of the response <p>Constructor:</p> <pre><code>AssistantResponseUpdate(invocation_id: str, content: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track this specific query content The partial response content to append"},{"location":"api/events/#event-assistantresponsecomplete","title":"<code>event</code> AssistantResponseComplete","text":"<p>Event triggered when assistant completes processing a query</p> <pre><code>class AssistantResponseComplete(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for this query invocation content str Final complete content of the response <p>Constructor:</p> <pre><code>AssistantResponseComplete(invocation_id: str, content: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track this specific query content The final complete response content"},{"location":"api/events/#event-assistantresponseerror","title":"<code>event</code> AssistantResponseError","text":"<p>Event triggered when assistant encounters an error</p> <pre><code>class AssistantResponseError(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for this query invocation error str Error message describing what went wrong <p>Constructor:</p> <pre><code>AssistantResponseError(invocation_id: str, error: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track this specific query error Description of the error that occurred"},{"location":"api/events/#tool-call-events","title":"Tool Call Events","text":"<p>Events related to tool execution during assistant processing.</p>"},{"location":"api/events/#event-assistanttoolcallstart","title":"<code>event</code> AssistantToolCallStart","text":"<p>Event triggered when assistant starts a tool call</p> <pre><code>class AssistantToolCallStart(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for the query invocation tool_call_id str Unique identifier for this specific tool call tool_name str Name of the tool being called args str JSON string of arguments passed to the tool <p>Constructor:</p> <pre><code>AssistantToolCallStart(invocation_id: str, tool_call_id: str, tool_name: str, args: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track the query tool_call_id Unique ID for this tool call within the query tool_name Name of the tool being executed args JSON-encoded arguments being passed to the tool"},{"location":"api/events/#event-assistanttoolcallcomplete","title":"<code>event</code> AssistantToolCallComplete","text":"<p>Event triggered when assistant completes a tool call</p> <pre><code>class AssistantToolCallComplete(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for the query invocation tool_call_id str Unique identifier for this specific tool call tool_name str Name of the tool that was called result str JSON string of the tool's return value <p>Constructor:</p> <pre><code>AssistantToolCallComplete(invocation_id: str, tool_call_id: str, tool_name: str, result: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track the query tool_call_id Unique ID for this tool call within the query tool_name Name of the tool that was executed result JSON-encoded result returned by the tool"},{"location":"api/events/#event-assistanttoolcallerror","title":"<code>event</code> AssistantToolCallError","text":"<p>Event triggered when assistant encounters an error during a tool call</p> <pre><code>class AssistantToolCallError(Message)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Unique identifier for the query invocation tool_call_id str Unique identifier for this specific tool call tool_name str Name of the tool that failed error str Error message describing what went wrong <p>Constructor:</p> <pre><code>AssistantToolCallError(invocation_id: str, tool_call_id: str, tool_name: str, error: str)\n</code></pre> <p>Parameters:</p> Param Default Description invocation_id Unique ID to track the query tool_call_id Unique ID for this tool call within the query tool_name Name of the tool that encountered an error error Description of the error that occurred"},{"location":"api/events/#event-flow","title":"Event Flow","text":"<p>Understanding how events flow through the system:</p>"},{"location":"api/events/#query-processing-flow","title":"Query Processing Flow","text":"<ol> <li>User Input: <code>NewMessage</code> \u2192 User types a message</li> <li>Assistant Start: <code>AssistantResponseStart</code> \u2192 Processing begins</li> <li>Streaming Updates: <code>AssistantResponseUpdate</code> \u2192 Partial responses (optional)</li> <li>Tool Execution (if needed):<ul> <li><code>AssistantToolCallStart</code> \u2192 Tool begins execution</li> <li><code>AssistantToolCallComplete</code> \u2192 Tool finishes successfully</li> <li><code>AssistantToolCallError</code> \u2192 Tool encounters error (alternative)</li> </ul> </li> <li>Assistant Complete: <code>AssistantResponseComplete</code> \u2192 Final response</li> <li>Error Handling: <code>AssistantResponseError</code> \u2192 If processing fails (alternative)</li> </ol>"},{"location":"api/events/#session-management-flow","title":"Session Management Flow","text":"<ol> <li>Create: <code>NewSession</code> \u2192 Creates a new conversation</li> <li>Load: <code>LoadSession</code> \u2192 Switches to existing conversation  </li> <li>Delete: <code>DeleteSession</code> \u2192 Removes conversation from history</li> </ol>"},{"location":"api/events/#ui-navigation-flow","title":"UI Navigation Flow","text":"<ul> <li>View Change: <code>ChangeView</code> \u2192 Switches between app sections (chat, settings, about)</li> </ul>"},{"location":"api/runtime/","title":"DasshhRuntime","text":"<p>This page lays out all the methods and attributes available on the DasshhRuntime class.</p> <p>Tip</p> <p>DasshhRuntime is the core engine that handles AI model interactions, tool execution, and session management in Dasshh.</p>"},{"location":"api/runtime/#attr-model","title":"<code>attr</code> model","text":"<p>The model to use for the runtime</p> <pre><code>model: str = \"\"\n</code></pre>"},{"location":"api/runtime/#attr-api_base","title":"<code>attr</code> api_base","text":"<p>The base URL for the API</p> <pre><code>api_base: str = \"\"\n</code></pre>"},{"location":"api/runtime/#attr-api_key","title":"<code>attr</code> api_key","text":"<p>The API key to use for the runtime</p> <pre><code>api_key: str = \"\"\n</code></pre>"},{"location":"api/runtime/#attr-api_version","title":"<code>attr</code> api_version","text":"<p>The API version to use for the runtime</p> <pre><code>api_version: str = \"\"\n</code></pre>"},{"location":"api/runtime/#attr-temperature","title":"<code>attr</code> temperature","text":"<p>The temperature to use for the runtime</p> <pre><code>temperature: float = 1.0\n</code></pre>"},{"location":"api/runtime/#attr-top_p","title":"<code>attr</code> top_p","text":"<p>The top_p to use for the runtime</p> <pre><code>top_p: float = 1.0\n</code></pre>"},{"location":"api/runtime/#attr-max_tokens","title":"<code>attr</code> max_tokens","text":"<p>The max_tokens to use for the runtime</p> <pre><code>max_tokens: int | None = None\n</code></pre>"},{"location":"api/runtime/#attr-max_completion_tokens","title":"<code>attr</code> max_completion_tokens","text":"<p>The max_completion_tokens to use for the runtime</p> <pre><code>max_completion_tokens: int | None = None\n</code></pre>"},{"location":"api/runtime/#attr-skip_summarization","title":"<code>attr</code> skip_summarization","text":"<p>Whether to skip summarization after a tool call</p> <pre><code>skip_summarization: bool = False\n</code></pre>"},{"location":"api/runtime/#property-system_prompt","title":"<code>property</code> system_prompt","text":"<pre><code>system_prompt -&gt; dict\n</code></pre> <p>Returns the system prompt as a formatted message dictionary</p> <p>Returns:</p> Type Default Description dict System prompt formatted as a message with role and content"},{"location":"api/runtime/#method-init","title":"<code>method</code> init","text":"<pre><code>__init__(session_service: SessionService)\n</code></pre> <p>Initialize the DasshhRuntime with a session service</p> <p>Parameters:</p> Param Default Description session_service The SessionService instance for managing conversations and events"},{"location":"api/runtime/#method-start","title":"<code>method</code> start","text":"<pre><code>async start()\n</code></pre> <p>Start the runtime worker that processes the query queue</p>"},{"location":"api/runtime/#method-stop","title":"<code>method</code> stop","text":"<pre><code>async stop()\n</code></pre> <p>Stop the runtime worker and cancel any pending operations</p>"},{"location":"api/runtime/#method-submit_query","title":"<code>method</code> submit_query","text":"<pre><code>async submit_query(\n    *,\n    message: str,\n    session_id: str,\n    post_message_callback: Callable,\n) -&gt; None\n</code></pre> <p>Submit a query to the runtime for processing</p> <p>Parameters:</p> Param Default Description message The user message to send to the AI session_id The session ID to associate with this conversation post_message_callback Callback function to send UI events back to the interface <p>Returns:</p> Type Default Description None This method is async and doesn't return a value"},{"location":"api/runtime/#method-_load_model_config","title":"<code>method</code> _load_model_config","text":"<pre><code>_load_model_config() -&gt; None\n</code></pre> <p>Load model configuration from the config file</p> <p>Raises:</p> Type Default Description ValueError If API key is not set in configuration"},{"location":"api/runtime/#method-_generate_prompt","title":"<code>method</code> _generate_prompt","text":"<pre><code>_generate_prompt(context: InvocationContext) -&gt; List[dict]\n</code></pre> <p>Generate the complete prompt including system message and conversation history</p> <p>Parameters:</p> Param Default Description context The invocation context containing session and message information <p>Returns:</p> Type Default Description List[dict] List of message dictionaries formatted for the AI model"},{"location":"api/runtime/#method-_process_queue","title":"<code>method</code> _process_queue","text":"<pre><code>async _process_queue()\n</code></pre> <p>Main worker loop that processes queries from the queue</p>"},{"location":"api/runtime/#method-_run_async","title":"<code>method</code> _run_async","text":"<pre><code>async _run_async(context: InvocationContext) -&gt; AsyncGenerator[ModelResponse, None]\n</code></pre> <p>Execute the AI completion request and yield streaming responses</p> <p>Parameters:</p> Param Default Description context The invocation context for this query <p>Returns:</p> Type Default Description AsyncGenerator Stream of model responses"},{"location":"api/runtime/#method-_handle_tool_calls","title":"<code>method</code> _handle_tool_calls","text":"<pre><code>async _handle_tool_calls(\n    context: InvocationContext,\n    tool_calls: list[ChatCompletionDeltaToolCall],\n) -&gt; None\n</code></pre> <p>Process and execute tool calls from the AI model</p> <p>Parameters:</p> Param Default Description context The invocation context tool_calls List of tool calls to execute"},{"location":"api/runtime/#invocationcontext","title":"InvocationContext:","text":"<p>A named tuple to store current query context.</p> Param Type Description invocation_id str The ID of the invocation message dict The message to send to the LLM session_id str The ID of the session system_instruction bool Whether to use the system instruction"},{"location":"api/tools/","title":"Tools","text":"<p>This page lays out all the components available in the tools module.</p> <p>Tip</p> <p>Tools are the core mechanism for extending Dasshh's capabilities. Use the <code>@tool</code> decorator to convert functions into tools that the AI assistant can use.</p>"},{"location":"api/tools/#basetool","title":"BaseTool","text":"<p>Abstract base class for all tools in Dasshh.</p>"},{"location":"api/tools/#attr-name","title":"<code>attr</code> name","text":"<p>The name of the tool</p> <pre><code>name: str\n</code></pre>"},{"location":"api/tools/#attr-description","title":"<code>attr</code> description","text":"<p>The description of the tool</p> <pre><code>description: str\n</code></pre>"},{"location":"api/tools/#attr-parameters","title":"<code>attr</code> parameters","text":"<p>The parameters of the tool</p> <pre><code>parameters: dict\n</code></pre>"},{"location":"api/tools/#method-init","title":"<code>method</code> init","text":"<pre><code>__init__(name: str, description: str, parameters: dict)\n</code></pre> <p>Initialize a new BaseTool instance</p> <p>Parameters:</p> Param Default Description name The name of the tool description The description of what the tool does parameters Dictionary containing the tool's parameters"},{"location":"api/tools/#method-call","title":"<code>method</code> call","text":"<pre><code>__call__(*args, **kwargs)\n</code></pre> <p>Execute the tool with the given arguments</p> <p>Parameters:</p> Param Default Description *args Positional arguments to pass to the tool **kwargs Keyword arguments to pass to the tool <p>Raises:</p> Type Default Description NotImplementedError If the tool has no implementation"},{"location":"api/tools/#method-get_declaration","title":"<code>method</code> get_declaration","text":"<pre><code>get_declaration() -&gt; dict\n</code></pre> <p>Get the declaration of the tool for the AI model</p> <p>Returns:</p> Type Default Description dict Tool declaration formatted for the AI model <p>Raises:</p> Type Default Description NotImplementedError If the tool has no implementation"},{"location":"api/tools/#functiontool","title":"FunctionTool","text":"<p>A concrete implementation of BaseTool that wraps Python functions.</p>"},{"location":"api/tools/#attr-func","title":"<code>attr</code> func","text":"<p>The function wrapped by this tool</p> <pre><code>func: Callable = None\n</code></pre>"},{"location":"api/tools/#method-init_1","title":"<code>method</code> init","text":"<pre><code>__init__(name: str, description: str, parameters: dict, func: Callable = None)\n</code></pre> <p>Initialize a new FunctionTool instance</p> <p>Parameters:</p> Param Default Description name The name of the tool description The description of what the tool does parameters Dictionary containing the tool's parameters func None The callable function to wrap"},{"location":"api/tools/#method-call_1","title":"<code>method</code> call","text":"<pre><code>__call__(*args, **kwargs)\n</code></pre> <p>Execute the wrapped function with the given arguments</p> <p>Parameters:</p> Param Default Description *args Positional arguments to pass to the function **kwargs Keyword arguments to pass to the function <p>Returns:</p> Type Default Description Any The return value of the wrapped function <p>Raises:</p> Type Default Description NotImplementedError If no function is set"},{"location":"api/tools/#method-get_declaration_1","title":"<code>method</code> get_declaration","text":"<pre><code>get_declaration() -&gt; dict\n</code></pre> <p>Get the declaration of the tool formatted for the AI model</p> <p>Returns:</p> Type Default Description dict Tool declaration using litellm's function_to_dict format"},{"location":"api/tools/#tool-decorator","title":"@tool Decorator","text":"<p>The main decorator for creating tools in Dasshh.</p>"},{"location":"api/tools/#decorator-tool","title":"<code>decorator</code> tool","text":"<pre><code>@tool\ndef your_function():\n    pass\n</code></pre> <p>Convert a function into a tool and register it with Dasshh</p> <p>Usage:</p> <pre><code>from dasshh.core.tools.decorator import tool\nfrom typing import Dict\n\n@tool\ndef hello_world(name: str = \"World\") -&gt; Dict:\n    \"\"\"\n    A simple greeting tool.\n\n    Args:\n        name (str, optional): The name to greet. Defaults to \"World\".\n\n    Returns:\n        Dict: A dictionary containing the greeting message.\n    \"\"\"\n    return {\"message\": f\"Hello, {name}!\"}\n</code></pre> <p>Parameters:</p> Param Default Description func The function to convert into a tool <p>Returns:</p> Type Default Description FunctionTool A FunctionTool instance wrapping the original function <p>Notes:</p> <ul> <li>The decorator automatically extracts the function name as the tool name</li> <li>The function's docstring becomes the tool description</li> <li>Function annotations are used to define tool parameters</li> <li>The tool is automatically registered with the global Registry</li> </ul> <p>Tip</p> <p>Checkout this guide to build your own tools.</p>"},{"location":"api/ui/","title":"UI","text":"<p>This page lays out all the classes and utilities available in the Dasshh UI module.</p>"},{"location":"api/ui/#ui-architecture","title":"UI Architecture","text":""},{"location":"api/ui/#component-hierarchy","title":"Component Hierarchy","text":"<pre><code>Dasshh (App)\n\u2514\u2500\u2500 MainScreen\n    \u251c\u2500\u2500 Navbar\n    \u2514\u2500\u2500 ContentSwitcher\n        \u251c\u2500\u2500 Chat (View)\n        \u2502   \u251c\u2500\u2500 HistoryPanel\n        \u2502   \u251c\u2500\u2500 ChatPanel\n        \u2502   \u2514\u2500\u2500 ActionsPanel\n        \u251c\u2500\u2500 Settings (View)\n        \u2514\u2500\u2500 About (View)\n</code></pre>"},{"location":"api/ui/#component-categories","title":"Component Categories","text":"<ol> <li>Screens - Top-level containers (MainScreen, HelpScreen)</li> <li>Views - Content areas within screens (Chat, Settings, About)</li> <li>Components - Reusable UI elements (Navbar, ChatPanel, etc.)</li> </ol>"},{"location":"api/ui/#data-flow","title":"Data Flow","text":"<ol> <li>User Input \u2192 UI Components \u2192 Events</li> <li>Events \u2192 Runtime \u2192 AI Processing</li> <li>AI Responses \u2192 Events \u2192 UI Updates</li> <li>Database \u2194 SessionService \u2194 UI Components</li> </ol>"},{"location":"api/ui/#event-driven-architecture","title":"Event-Driven Architecture","text":"<ul> <li>UI components communicate via Textual's Message system</li> <li>Events defined in <code>dasshh.ui.events</code> module</li> <li>Runtime publishes events back to UI via callbacks</li> <li>State management through session persistence</li> </ul>"},{"location":"api/ui/#main-application","title":"Main Application","text":""},{"location":"api/ui/#class-dasshh","title":"<code>class</code> Dasshh","text":"<p>Main application class that extends Textual's App</p> <pre><code>class Dasshh(App)\n</code></pre> <p>Attributes:</p> Attribute Type Description SCREENS dict Available screens mapped by name BINDINGS list Key bindings for the application logger logging.Logger Application logger instance runtime DasshhRuntime AI runtime engine for processing queries session_service SessionService Database service for managing sessions"},{"location":"api/ui/#method-init","title":"<code>method</code> init","text":"<pre><code>__init__(*args, **kwargs)\n</code></pre> <p>Initialize the Dasshh application</p> <p>Behavior:</p> <ul> <li>Loads configuration file</li> <li>Loads and registers tools</li> <li>Initializes database and runtime services</li> <li>Sets up logging</li> </ul>"},{"location":"api/ui/#method-on_mount","title":"<code>method</code> on_mount","text":"<pre><code>async on_mount()\n</code></pre> <p>Application mount lifecycle method</p>"},{"location":"api/ui/#method-on_unmount","title":"<code>method</code> on_unmount","text":"<pre><code>async on_unmount()\n</code></pre> <p>Application unmount lifecycle method</p>"},{"location":"api/ui/#ui-types","title":"UI Types","text":"<p>Type definitions for UI components using Pydantic models.</p>"},{"location":"api/ui/#type-uimessage","title":"<code>type</code> UIMessage","text":"<p>Message model for displaying chat messages in the UI</p> <pre><code>class UIMessage(BaseModel)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str The invocation ID of the message (optional, defaults to \"\") role Literal[\"user\", \"assistant\"] The role of the message sender content str The text content of the message <p>Usage: <pre><code>message = UIMessage(\n    invocation_id=\"inv_123\",\n    role=\"user\", \n    content=\"Hello, how are you?\"\n)\n</code></pre></p>"},{"location":"api/ui/#type-uiaction","title":"<code>type</code> UIAction","text":"<p>Action model for displaying tool calls and results in the UI</p> <pre><code>class UIAction(BaseModel)\n</code></pre> <p>Attributes:</p> Attribute Type Description tool_call_id str Unique identifier for the tool call invocation_id str The invocation ID this action belongs to name str Name of the tool that was called args str JSON string of arguments passed to the tool (formatted with indent=2) result str JSON string of the tool's return value (formatted with indent=2) <p>Usage: <pre><code>action = UIAction(\n    tool_call_id=\"call_123\",\n    invocation_id=\"inv_456\",\n    name=\"get_weather\",\n    args='{\\n  \"city\": \"San Francisco\"\\n}',\n    result='{\\n  \"temperature\": 72,\\n  \"condition\": \"sunny\"\\n}'\n)\n</code></pre></p>"},{"location":"api/ui/#type-uisession","title":"<code>type</code> UISession","text":"<p>Session model for displaying chat sessions in the UI</p> <pre><code>class UISession(BaseModel)\n</code></pre> <p>Attributes:</p> Attribute Type Description id str Unique identifier for the session detail str Brief description or preview of the session created_at datetime When the session was created updated_at datetime When the session was last updated messages List[UIMessage] All messages in the session actions List[UIAction] All tool actions in the session"},{"location":"api/ui/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/ui/#basic-application-setup","title":"Basic Application Setup","text":"<pre><code>from dasshh.ui.app import Dasshh\n\n# Create and run application\napp = Dasshh()\napp.run()\n</code></pre>"},{"location":"api/ui/#working-with-ui-types","title":"Working with UI Types","text":"<pre><code>from dasshh.ui.types import UIMessage, UIAction, UISession\nfrom dasshh.ui.utils import convert_session_obj\n\n# Convert database session to UI session\nui_session = convert_session_obj(db_session, events)\n\n# Access messages and actions\nfor message in ui_session.messages:\n    print(f\"{message.role}: {message.content}\")\n\nfor action in ui_session.actions:\n    print(f\"Tool: {action.name}, Result: {action.result}\")\n</code></pre>"},{"location":"api/ui/#configuration-management","title":"Configuration Management","text":"<pre><code>from dasshh.ui.utils import load_config, get_from_config\n\n# Initialize config\nload_config()\n\n# Read configuration values\nmodel_name = get_from_config(\"model.name\")\napi_key = get_from_config(\"model.api_key\")\n</code></pre>"},{"location":"api/ui/#chat-components","title":"Chat Components","text":"<p>The main UI components that make up the three-panel chat interface.</p>"},{"location":"api/ui/#class-chatpanel","title":"<code>class</code> ChatPanel","text":"<p>Main chat panel containing the chat history and input area</p> <pre><code>class ChatPanel(Widget)\n</code></pre> <p>Methods:</p> Method Parameters Description <code>reset()</code> None Clears all messages and shows a default message. Disables chat input <code>load_messages()</code> messages: List[UIMessage] Loads messages from a previous chat session and enables input <code>add_new_message()</code> message: UIMessage Adds a new message to the chat history and scrolls to bottom <code>update_assistant_message()</code> invocation_id: str, content: str, final: bool Updates streaming assistant messages <code>get_message_widget()</code> invocation_id: str Returns the ChatMessage widget for given invocation ID <p>Usage: <pre><code># Reset panel\nchat_panel.reset()\n\n# Load previous messages\nchat_panel.load_messages(ui_session.messages)\n\n# Add new message\nnew_message = UIMessage(role=\"user\", content=\"Hello!\")\nchat_panel.add_new_message(new_message)\n\n# Update streaming response\nchat_panel.update_assistant_message(\n    invocation_id=\"inv_123\",\n    content=\"Hello! How can I help?\",\n    final=True\n)\n</code></pre></p>"},{"location":"api/ui/#class-historypanel","title":"<code>class</code> HistoryPanel","text":"<p>Sessions panel for managing chat history and creating new sessions</p> <pre><code>class HistoryPanel(Widget)\n</code></pre> <p>Methods:</p> Method Parameters Description <code>load_sessions()</code> sessions: List[UISession], current: str Loads all sessions and marks current one <code>add_session()</code> session: UISession Adds a new session to the panel <code>set_current_session()</code> session_id: str Updates visual selection of current session <code>get_history_item_widget()</code> session_id: str Returns HistoryItem widget for given session <p>Events Generated:</p> <ul> <li><code>NewSession</code> - When \"New Session\" button is pressed</li> <li><code>LoadSession</code> - When a session is clicked</li> <li><code>DeleteSession</code> - When delete icon is clicked</li> </ul> <p>Usage: <pre><code># Load sessions with current selection\nhistory_panel.load_sessions(all_sessions, current_session_id)\n\n# Add new session\nnew_session = UISession(id=\"sess_123\", detail=\"New conversation\")\nhistory_panel.add_session(new_session)\n\n# Update current selection\nhistory_panel.set_current_session(\"sess_456\")\n</code></pre></p>"},{"location":"api/ui/#class-actionspanel","title":"<code>class</code> ActionsPanel","text":"<p>Actions panel for displaying tool calls and their results</p> <pre><code>class ActionsPanel(Widget)\n</code></pre> <p>Methods:</p> Method Parameters Description <code>reset()</code> None Clears all actions from the panel <code>load_actions()</code> actions: List[UIAction] Loads actions from a previous session <code>add_action()</code> action: UIAction Adds a new tool action to the panel <code>update_action()</code> invocation_id: str, tool_call_id: str, result: str Updates action with result <code>get_action_widget()</code> invocation_id: str, tool_call_id: str Returns Action widget for given IDs <code>handle_error()</code> error: str Shows error notification for failed tools <p>Usage: <pre><code># Reset panel\nactions_panel.reset()\n\n# Load previous actions\nactions_panel.load_actions(ui_session.actions)\n\n# Add new action\nnew_action = UIAction(\n    tool_call_id=\"call_123\",\n    invocation_id=\"inv_456\", \n    name=\"get_weather\",\n    args='{\"city\": \"San Francisco\"}',\n    result=\"\"\n)\nactions_panel.add_action(new_action)\n\n# Update with result\nactions_panel.update_action(\n    invocation_id=\"inv_456\",\n    tool_call_id=\"call_123\",\n    result='{\"temperature\": 72}'\n)\n</code></pre></p>"},{"location":"api/ui/#component-sub-elements","title":"Component Sub-Elements","text":"<p>Individual components used within the main panels.</p>"},{"location":"api/ui/#class-chatmessage","title":"<code>class</code> ChatMessage","text":"<p>Individual message display component</p> <pre><code>class ChatMessage(Static)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Links message to specific invocation role str Either \"you\" or \"dasshh\" (converted from \"user\"/\"assistant\") content str Message text content (reactive, triggers re-render) user_icon str Icon for user messages assistant_icon str Icon for assistant messages"},{"location":"api/ui/#class-action","title":"<code>class</code> Action","text":"<p>Individual tool action display component</p> <pre><code>class Action(Static)\n</code></pre> <p>Attributes:</p> Attribute Type Description invocation_id str Links action to specific invocation tool_call_id str Unique identifier for this tool call name str Name of the tool being called args str JSON-formatted tool arguments result str JSON-formatted tool result"},{"location":"api/ui/#class-historyitem","title":"<code>class</code> HistoryItem","text":"<p>Individual session item in history panel</p> <pre><code>class HistoryItem(Static)\n</code></pre> <p>Attributes:</p> Attribute Type Description session_id str Unique session identifier detail str Session preview text (truncated to 40 chars) created_at datetime Session creation timestamp selected bool Whether this session is currently active <p>Events Generated: - <code>LoadSession</code> - When clicked</p>"},{"location":"api/ui/#class-deleteicon","title":"<code>class</code> DeleteIcon","text":"<p>Delete button for session items</p> <pre><code>class DeleteIcon(Static)\n</code></pre> <p>Attributes:</p> Attribute Type Description session_id str Session to delete when clicked selected bool Matches parent HistoryItem selection state <p>Events Generated: - <code>DeleteSession</code> - When clicked</p>"},{"location":"api/ui/#event-handling","title":"Event Handling","text":""},{"location":"api/ui/#component-communication","title":"Component Communication","text":"<p>Components communicate via Textual's message system:</p> <pre><code># Session management\nself.post_message(NewSession())\nself.post_message(LoadSession(session_id))\nself.post_message(DeleteSession(session_id))\n\n# Handle events\n@on(LoadSession)\ndef handle_load_session(self, event: LoadSession):\n    # Load session by ID\n    pass\n</code></pre>"},{"location":"api/ui/#state-management","title":"State Management","text":"<p>Components maintain state through reactive attributes:</p> <pre><code># Reactive updates trigger re-renders\nmessage.content = \"New content\"  # Auto-updates display\naction.result = json.dumps(result)  # Updates result display\nhistory_item.selected = True  # Updates visual selection\n</code></pre>"},{"location":"api/ui/#error-handling","title":"Error Handling","text":"<pre><code># Actions panel handles tool errors\nactions_panel.handle_error(\"Tool execution failed\")\n\n# Shows toast notification to user\n# Uses Textual's notification system\n</code></pre>"},{"location":"contributing/contributing/","title":"Contributing to Dasshh","text":"<p>Thank you for your interest in contributing to Dasshh! This guide will help you get started with the development process.</p>"},{"location":"contributing/contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/vgnshiyer/dasshh.git\ncd dasshh\n</code></pre> <ol> <li>Create a virtual environment:</li> </ol> <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre> <ol> <li>Install development dependencies:</li> </ol> <pre><code>uv sync\n</code></pre>"},{"location":"contributing/contributing/#running-dasshh-in-development-mode","title":"Running Dasshh in Development Mode","text":"<p>To run Dasshh locally during development:</p> <pre><code>python -m dasshh\n</code></pre>"},{"location":"contributing/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a new branch for your feature or bugfix:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make your changes and test them locally.</p> </li> <li> <p>Run the tests to ensure everything works:</p> </li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit your changes with a descriptive message:</li> </ol> <pre><code>git add .\ngit commit -m \"Add your descriptive message here\"\n</code></pre> <ol> <li>Push your branch and create a pull request:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <p>Then, create a pull request on GitHub.</p>"},{"location":"contributing/contributing/#code-style","title":"Code Style","text":"<p>Dasshh follows the PEP 8 style guide for Python code. Please ensure your code adheres to this standard.</p>"},{"location":"contributing/contributing/#testing","title":"Testing","text":"<p>All new features should include appropriate test coverage. Run the test suite using:</p> <pre><code>pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>pytest --cov=dasshh\n</code></pre>"},{"location":"contributing/contributing/#documentation","title":"Documentation","text":"<p>When adding new features, please update the documentation accordingly. Dasshh uses MkDocs for documentation.</p> <p>To preview the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then visit <code>http://localhost:8000</code> in your browser. </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Dasshh can be installed on MacOS, Linux and Windows using various package managers. Choose the one that works best for you.</p>"},{"location":"getting-started/installation/#using-uv-recommended","title":"Using <code>uv</code> (Recommended)","text":"<p>If you haven't tried uv yet, it's one of those \"I will rewrite this in rust\" projects that is actually awesome. Highly recommend trying it out.</p> <p>You can install <code>uv</code> using <code>brew</code> if you are on macOS:</p> <pre><code># Install uv on macOS\nbrew install uv\n</code></pre> <p>Or using <code>curl</code>.</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Install <code>dasshh</code> using <code>uv</code>:</p> <pre><code>uv tool install dasshh\n</code></pre>"},{"location":"getting-started/installation/#using-pipx","title":"Using <code>pipx</code>","text":"<p>You can also use pipx to install Dasshh.</p> <pre><code># Install pipx if you haven't already\npip install --user pipx\npipx ensurepath\n\n# Install dasshh with pipx\npipx install dasshh\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you should be able to run Dasshh from your terminal:</p> <pre><code>dasshh --version\n</code></pre> <p>If the installation was successful, you should see the version of Dasshh printed to the terminal.</p>"},{"location":"getting-started/introduction/","title":"Welcome to Dasshh!","text":""},{"location":"getting-started/introduction/#what-is-dasshh","title":"What is Dasshh?","text":"<p>Dasshh is an open-source terminal-based AI assistant that allows you to interact with your computer using natural language. It's designed to save your cognitive energy by enabling you to accomplish repetitive tasks on your computer with simple, conversational commands.</p> <p>Instead of remembering arcane command-line syntax or navigating complex directory structures, Dasshh lets you describe what you want to do in plain English, and it handles the technical details for you.</p> <p>Moreover, you can add your own tools to Dasshh to make it even more powerful, allowing it to interact with your applications and services.</p>"},{"location":"getting-started/introduction/#technical-foundation","title":"Technical Foundation","text":"<p>Dasshh is built using several powerful Python libraries:</p> <ul> <li>Textual - The modern TUI (Text User Interface) framework that powers Dasshh's beautiful terminal interface</li> <li>LiteLLM - Provides the AI model connection layer, making it easy to work with various LLM providers</li> <li>SQLAlchemy - Manages persistent data storage for chat history and application state</li> <li>Click - Powers the command-line interface for Dasshh</li> </ul>"},{"location":"getting-started/introduction/#development-status","title":"Development Status","text":"<p>Dasshh is currently in early development. While it already offers valuable functionality, we're actively working on expanding its capabilities, improving stability, and enhancing the user experience.</p> <p>We welcome contributions, suggestions, and feedback from the community to help shape the future of Dasshh.</p>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>Ready to try Dasshh? Head over to the Installation guide to get started, or check out the Usage Guide to learn how to make the most of your new terminal AI assistant.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This little guide will help you get started with Dasshh.</p>"},{"location":"getting-started/quick-start/#configure-a-model","title":"Configure a Model","text":"<p>Dasshh uses LLM models via the litellm library, which provides a unified interface to various AI providers.</p> <p>Setup your config file by running:</p> <pre><code>dasshh init-config\n</code></pre> <p>This will create a config file at <code>~/.dasshh/config.yaml</code>.</p> <p>To get started, you need to set the model you want to use.</p> <ol> <li><code>model.name</code>: The model provider and model name.</li> <li><code>model.api_key</code>: Your API key for the chosen provider.</li> </ol> <p>Example:</p> <pre><code>model:\n  name: gemini/gemini-2.0-flash\n  api_key: &lt;your-google-AI-studio-api-key&gt;\n</code></pre> <p>Tip</p> <p>Checkout the list of supported models and providers here.</p>"},{"location":"getting-started/quick-start/#launch-dasshh","title":"Launch Dasshh","text":"<p>Once you have configured the model and your API key, you can launch Dasshh by running:</p> <pre><code>dasshh\n</code></pre> <p>This will open the Dasshh interface in your terminal.</p>"},{"location":"getting-started/quick-start/#basic-interaction","title":"Basic Interaction","text":"<p>Dasshh provides a conversational interface to interact with your computer.</p> <p></p> <p>You can:</p> <ol> <li>Ask questions</li> <li>Request information about your system</li> <li>Execute commands on your behalf</li> </ol> <p>to name a few.</p> <p>More capabilities will be added in the future, across different applications. If you have any suggestions for new tools, please open an issue.</p>"},{"location":"getting-started/quick-start/#example-questions","title":"Example Questions","text":"<p>Here are some examples of what you can ask Dasshh to do:</p> <pre><code># Ask for information\n1. What's the current CPU usage?\n2. Show me the top memory-intensive processes\n\n# File operations\n1. List files in my downloads folder\n2. Create a new directory called \"projects\" in the current directory\n</code></pre>"},{"location":"getting-started/quick-start/#terminating-dasshh","title":"Terminating Dasshh","text":"<p>To exit Dasshh, you can press <code>Ctrl+C</code> to terminate the application.</p>"},{"location":"guide/abilities/","title":"Abilities","text":"<p>Dasshh supports various tools to interact with your system using natural language commands.</p> <p>More tools will be added in future versions. Please feel free to drop your suggestions here.</p> <p>Note</p> <p>Permission based tool execution is currently under development. As of now, Dasshh will perform a tool call if it seems appropriate.</p>"},{"location":"guide/abilities/#available-tools","title":"Available Tools","text":"<p>In the current version of Dasshh, the following tools are available:</p>"},{"location":"guide/abilities/#system-information","title":"System Information","text":"<p>These tools provide information about your system's hardware and software:</p> Tool Name Description Example Commands <code>system_info</code> Get detailed information about your operating system \"What OS am I running?\" <code>cpu_info</code> Get information about CPU and its current usage \"Show my CPU usage\" <code>memory_info</code> Get memory (RAM) information and usage \"How much RAM do I have available?\" <code>disk_info</code> Get disk space information for a specified path \"How much disk space is left on my main drive?\" <code>network_info</code> Get network interface information \"Show my network interface details\""},{"location":"guide/abilities/#process-management","title":"Process Management","text":"<p>These tools help you manage running processes on your system:</p> Tool Name Description Example Commands <code>process_list</code> List all running processes with basic information \"Show all running processes\" <code>find_process</code> Find processes matching a specific name pattern \"Find all Chrome processes\" <code>get_process_info</code> Get detailed information about a specific process by PID \"Give me details about process 1234\" <code>kill_process</code> Terminate a process by its PID \"Kill process 1234\" <code>run_command</code> Run a shell command and return its output \"Run ls -la\""},{"location":"guide/abilities/#file-operations","title":"File Operations","text":"<p>These tools help you manage files and directories:</p> Tool Name Description Example Commands <code>current_directory</code> Get the current working directory \"What's my current directory?\" <code>list_files</code> List all files and directories in a specified directory \"List files in ~/Downloads\" <code>file_info</code> Get detailed information about a file or directory \"Tell me about file.txt\" <code>read_file</code> Read the contents of a file \"Read config.json\" <code>create_directory</code> Create a new directory at the specified path \"Create a directory called 'projects'\" <code>delete_file</code> Delete a file or directory \"Delete file.txt\" <code>copy_file</code> Copy a file or directory from source to destination \"Copy file.txt to ~/backup/\" <code>move_file</code> Move a file or directory from source to destination \"Move file.txt to ~/archive/\""},{"location":"guide/abilities/#network-tools","title":"Network Tools","text":"<p>These tools help you with network-related tasks:</p> Tool Name Description Example Commands <code>ping</code> Ping a host and return the results \"Ping google.com\" <code>get_ip_address</code> Get IP address for a hostname or the local machine \"What's my IP address?\" <code>check_port</code> Check if a specific port is in use on localhost \"Is port 8080 in use?\" <code>public_ip</code> Get the public IP address of the current machine \"What's my public IP?\" <code>traceroute</code> Perform a traceroute to a host \"Run traceroute to github.com\" <p>Note</p> <p>Based on your query, Dasshh can use multiple tools together to perform complex tasks.</p>"},{"location":"guide/basics/","title":"Basics","text":"<p>Dasshh is a terminal-based AI assistant that helps you interact with your computer using natural language. Here's what you need to know to get started.</p>"},{"location":"guide/basics/#core-components","title":"Core Components","text":""},{"location":"guide/basics/#chat-interface","title":"Chat Interface","text":"<p>The main component you'll interact with is the chat interface, which allows you to:</p> <p>With a focus on simplicity, Dasshh's chat interface is divided into three main panels:</p> <p></p>"},{"location":"guide/basics/#sessions-panel","title":"Sessions Panel","text":"<p>The Sessions Panel helps manage your conversation history.</p> <p></p> <ul> <li>Displays all your previous chat sessions</li> <li>Allows you to switch between different conversations</li> <li>Shows your last message on the session card</li> <li>Lets you create new sessions or delete existing ones</li> </ul>"},{"location":"guide/basics/#chat-panel","title":"Chat Panel","text":"<p>The Chat Panel is the main area where your conversation happens.</p> <p></p> <ul> <li>Shows the conversation history between you and the assistant</li> <li>Displays your messages and the assistant's responses</li> <li>Includes an input box at the bottom where you type your messages</li> </ul>"},{"location":"guide/basics/#actions-panel","title":"Actions Panel","text":"<p>The Actions Panel shows detailed information about tools used by the assistant.</p> <p></p> <ul> <li>Lists all the tools called during the current session</li> <li>Shows the parameters passed to each tool</li> <li>Displays the results returned by each tool</li> </ul>"},{"location":"guide/basics/#ai-assistant","title":"AI Assistant","text":"<p>The AI assistant is the brain of Dasshh that:</p> <ul> <li>Understands your requests</li> <li>Provides helpful responses</li> <li>Determines when to use tools to accomplish tasks</li> </ul> <p>Tip</p> <p>You can update the default <code>system_prompt</code> in the config file to change the behavior of the AI assistant.</p>"},{"location":"guide/basics/#tools","title":"Tools","text":"<p>Tools are nothing but the functions that the AI assistant can use to perform actions on your computer. You can find the list of tools here.</p> <p></p> <p>Additionally, Dasshh allows you to build your own tools. You can find the guide here.</p> <p>Future Plans</p> <ul> <li>MCP support</li> <li>API call tools</li> </ul>"},{"location":"guide/basics/#how-it-works","title":"How It Works","text":"<ol> <li>You type a request in natural language</li> <li>The AI assistant interprets what you want to do</li> <li>If needed, the assistant uses tools to perform actions on your computer</li> <li>Results are displayed in the chat interface</li> </ol>"},{"location":"guide/basics/#example-interactions","title":"Example Interactions","text":"<pre><code># system information\nWhat's my current CPU and memory usage?\n\n# file operations\nCreate a new folder called \"projects\".\n\n# process management\nWhich process is using the most memory?\n</code></pre>"},{"location":"guide/basics/#getting-help","title":"Getting Help","text":"<p>If you need help while using Dasshh, simply ask questions like <code>What can you do?</code>.</p> <p></p> <p>The assistant will guide you through the available features and capabilities. </p>"},{"location":"guide/basics/#important-paths","title":"Important Paths","text":"Path Description <code>~/.dasshh/config.yaml</code> Dasshh configuration file <code>~/.dasshh/db/dasshh.db</code> Dasshh database <code>~/.dasshh/logs/dasshh.log</code> Dasshh logs file"},{"location":"guide/configuration/","title":"Configuration","text":"<p>Below is a list of available configuration options.</p>"},{"location":"guide/configuration/#initial-setup","title":"Initial Setup","text":"<p>The default configuration file is located at <code>~/.dasshh/config.yaml</code>.</p> <p>Below command helps you initialize the configuration file.</p> <pre><code>dasshh init-config\n</code></pre>"},{"location":"guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"guide/configuration/#dasshh-configuration","title":"Dasshh Configuration","text":"Option Description <code>skip_summarization</code> Skip summarization of tool call results <code>system_prompt</code> The system prompt for the assistant <code>tool_directories</code> The directories to search for tools"},{"location":"guide/configuration/#model-configuration","title":"Model Configuration","text":"Option Description <code>model.name</code> The model provider and model name <code>model.api_key</code> Your API key for the chosen provider <code>model.api_base</code> The base URL for the chosen provider <code>model.api_version</code> The version of the API to use <code>model.temperature</code> The temperature for the model <code>model.top_p</code> The top-p value for the model <code>model.max_tokens</code> The maximum number of tokens to generate <code>model.max_completion_tokens</code> The maximum number of tokens to generate for the completion"},{"location":"guide/configuration/#example-configuration-file","title":"Example Configuration File","text":"<p>The configuration file is a YAML file with the following structure.</p> <pre><code># Dasshh configuration\ndasshh:\n  skip_summarization: false\n  system_prompt: |\n    You are a helpful assistant that can help with tasks on the system.\n    Your goal is to save user's time by performing tasks on their behalf.\n  tool_directories:\n    - /Users/viiyer/repos/dasshh/dasshh/apps\n\n# Model configuration\nmodel:\n  name: gemini/gemini-2.0-flash\n  api_base:\n  api_key: &lt;your-google-AI-studio-api-key&gt;\n  api_version:\n  temperature: 1.0\n  top_p: 1.0\n  max_tokens: 1000\n  max_completion_tokens: 1000\n</code></pre>"},{"location":"guide/configuration/#supported-models","title":"Supported Models","text":"<p>Dasshh supports a variety of models through LiteLLM.</p>"},{"location":"guide/configuration/#format-for-specifying-a-model","title":"Format for specifying a model","text":"<pre><code>model:\n  name: &lt;provider&gt;/&lt;model-name&gt;\n  api_key: &lt;your-api-key&gt;\n</code></pre>"},{"location":"guide/keybindings/","title":"Keybindings","text":""},{"location":"guide/keybindings/#current-keybindings","title":"Current Keybindings","text":"<p>Dasshh currently supports a minimal set of keyboard shortcuts:</p> Key Combination Action Ctrl+C Quit the application Ctrl+P Change theme"},{"location":"guide/keybindings/#future-plans","title":"Future Plans","text":"<p>More customizable keybindings are currently in development and will be added in future releases. These will include:</p> <ul> <li>Navigation shortcuts</li> <li>Message editing shortcuts</li> <li>Session management shortcuts</li> <li>Vim based text interactions</li> <li>Customizable user-defined keybindings</li> </ul> <p>Stay tuned for updates as we continue to enhance the keyboard navigation experience in Dasshh.</p> <p>If you have suggestions for specific keybindings you'd like to see implemented, please open an issue on our GitHub repository.</p>"},{"location":"guide/own-tools/","title":"Build your own tools","text":"<p>Dasshh allows you to extend its capabilities by creating your own custom tools. This guide will walk you through the process of building, testing, and integrating your own tools into Dasshh.</p>"},{"location":"guide/own-tools/#tool-basics","title":"Tool basics","text":"<p>In Dasshh, a tool is a Python function decorated with the <code>@tool</code> decorator. When you create a tool, it's automatically registered with Dasshh's tool registry, making it available for the AI assistant to use in conversations.</p>"},{"location":"guide/own-tools/#creating-a-simple-tool","title":"Creating a simple tool","text":"<p>Let's create a simple \"hello world\" tool to understand the basics:</p> <ol> <li>Create a new Python file in your desired location (we'll use a custom directory for this example)</li> <li>Define a function with proper type annotations and docstring</li> <li>Decorate it with the <code>@tool</code> decorator</li> </ol> <p>Here's an example:</p> <pre><code>from dasshh.core.tools.decorator import tool\nfrom typing import Dict\n\n@tool\ndef hello_world(name: str = \"World\") -&gt; Dict:\n    \"\"\"\n    A simple greeting tool that says hello to the provided name.\n\n    Args:\n        name (str, optional): The name to greet. Defaults to \"World\".\n\n    Returns:\n        Dict: A dictionary containing the greeting message.\n    \"\"\"\n    return {\n        \"message\": f\"Hello, {name}!\"\n    }\n</code></pre> <p>Note</p> <p>Functions must return a python dictionary.</p>"},{"location":"guide/own-tools/#tool-components","title":"Tool components","text":"<p>Every tool can have the following components:</p> <ol> <li>Function Name: This becomes the tool's name in the registry (e.g., <code>hello_world</code>)</li> <li>Docstring: This becomes the tool's description, explaining what it does</li> <li>Type Annotations: Define the input parameters and return type</li> <li>Implementation: The actual code that executes when the tool is called</li> </ol>"},{"location":"guide/own-tools/#setting-up-your-custom-tools-directory","title":"Setting up your custom tools directory","text":"<p>To organize your custom tools, it's best to create a dedicated directory structure like this:</p> <pre><code>my_dasshh_tools/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 weather/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 weather_tools.py\n</code></pre>"},{"location":"guide/own-tools/#step-1-create-your-directory-structure","title":"Step 1: Create your directory structure","text":"<pre><code>mkdir -p my_dasshh_tools/weather\ntouch my_dasshh_tools/__init__.py\ntouch my_dasshh_tools/weather/__init__.py\ntouch my_dasshh_tools/weather/weather_tools.py\n</code></pre>"},{"location":"guide/own-tools/#step-2-add-your-tools","title":"Step 2: Add your tools","text":"<p>For example, in <code>my_dasshh_tools/weather/weather_tools.py</code>:</p> <pre><code>from typing import Dict\nfrom dasshh.core.tools.decorator import tool\n\n@tool\ndef get_weather(city: str) -&gt; Dict:\n    \"\"\"\n    Get the current weather for a specified city.\n\n    Args:\n        city (str): The name of the city\n\n    Returns:\n        Dict: Weather information for the specified city\n    \"\"\"\n    if city == \"San Francisco\":\n        return {\n            \"temperature\": 15,\n            \"description\": \"sunny\"\n        }\n    else:\n        return {\n            \"temperature\": None,\n            \"description\": \"Weather not available for this city\"\n        }\n</code></pre> <p>Tip</p> <p>Don't worry about your interpreter complaining about <code>dasshh.core.tools.decorator</code>. When you run dasshh from the global binary, it will be available during runtime.</p>"},{"location":"guide/own-tools/#step-3-import-your-tools-in-the-__init__py-files","title":"Step 3: Import your tools in the <code>__init__.py</code> files","text":"<p>In <code>my_dasshh_tools/__init__.py</code>:</p> <pre><code>from .weather.weather_tools import myweather\n\n__all__ = ['myweather']\n</code></pre> <p>The <code>__init__.py</code> inside the <code>weather/</code> directory can be empty. It is only used to indicate that the <code>weather/</code> directory is a package.</p>"},{"location":"guide/own-tools/#registering-your-tools-with-dasshh","title":"Registering your tools with Dasshh","text":"<p>To make your tools available to Dasshh, you need to add your custom directory to Dasshh's configuration.</p> <ol> <li>Open your Dasshh configuration file at <code>~/.dasshh/config.yaml</code></li> <li>Add your custom directory to the <code>tool_directories</code> list.</li> </ol> <pre><code>dasshh:\n  skip_summarization: false\n  system_prompt: |\n    You are a helpful assistant that can help with tasks on the system.\n  tool_directories:\n    - /path/to/dasshh/apps         # Default tools directory\n    - /path/to/my_dasshh_tools     # Your custom tools directory\n</code></pre>"},{"location":"guide/own-tools/#tool-design-best-practices","title":"Tool design best practices","text":"<p>When creating your tools, follow these best practices:</p> <ol> <li>Clear Names: Use descriptive function names that indicate what the tool does</li> <li>Detailed Docstrings: Write clear descriptions of what the tool does, including parameter explanations</li> <li>Proper Type Annotations: Use Python type hints for all parameters and return values</li> <li>Error Handling: Handle exceptions gracefully and return informative error messages</li> <li>Return Structured Data: Always return dictionaries or similar structured data that's easy to parse</li> <li>Keep It Focused: Each tool should do one thing well rather than many things</li> </ol>"},{"location":"guide/own-tools/#testing-tool-discovery","title":"Testing tool discovery","text":"<p>To test if your tools are being discovered, ask Dasshh to list all tools.</p> <p></p> <p>If you see your tools listed, you're good to go!</p>"},{"location":"guide/own-tools/#debugging-your-tools","title":"Debugging your tools","text":"<p>If your tool isn't working as expected within Dasshh:</p> <ol> <li>Check the Dasshh logs at <code>~/.dasshh/logs/dasshh.log</code></li> <li>Ensure your tool directory is correctly listed in the configuration</li> <li>Verify that your tool is being imported correctly</li> <li>Check that your function signatures and type annotations are correct</li> </ol>"},{"location":"guide/own-tools/#understanding-how-tools-are-registered","title":"Understanding how tools are registered","text":"<p>When you decorate a function with <code>@tool</code>, the following happens:</p> <ol> <li>A <code>FunctionTool</code> instance is created with the function's name, docstring, and type annotations</li> <li>This tool is added to the global <code>Registry</code></li> <li>When Dasshh starts, it scans all directories listed in <code>tool_directories</code> and imports them</li> <li>During import, the decorators run and register all tools</li> <li>The assistant can then access this registry to use the tools</li> </ol> <p>Now you're ready to create your own custom tools for Dasshh!</p>"},{"location":"guide/own-tools/#additional-resources","title":"Additional Resources","text":"<ul> <li>Function Calling best practices (OpenAI)</li> </ul>"}]}